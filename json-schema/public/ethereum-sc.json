{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
        "address": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{40}$"
        },

        "addressArray": {
            "type": "array",
            "items": { "$ref": "#/definitions/address" }
        },

        "unixTime": {
            "type": "integer",
            "minimum": 1,
            "maximum": 2147483647
        },

        "fileHash": {
            "$comment": "deprecated, use hash instead",
            "type": "string",
            "pattern": "^0x[0-9a-fA-F]{64}$"
        },

        "hash": {
            "type": "string",
            "pattern": "^0x[0-9a-fA-F]{64}$"
        },

        "addressMappingEntry": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
                {
                    "$ref": "#/definitions/address"
                },
                {}
            ]
        },

        "addressMapping": {
            "type": "array",
            "items": { "$ref": "#/definitions/addressMappingEntry" }
        },

        "uintMappingEntry": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
                { "$ref": "#/definitions/uint" },
                {}
            ]
        },

        "uintMapping": {
            "type": "array",
            "items": { "$ref": "#/definitions/uintMappingEntry" }
        },

        "uint256": {
            "type": "string",
            "minLength": 1,
            "maxLength": 78,
            "pattern": "^[0-9]+$"
        },

        "uint": {
            "$ref": "#/definitions/uint256"
        },

        "bytes1": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{2}$"
        },
        "bytes2": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{4}$"
        },
        "bytes3": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{6}$"
        },
        "bytes4": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{8}$"
        },
        "bytes5": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{10}$"
        },
        "bytes6": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{12}$"
        },
        "bytes7": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{14}$"
        },
        "bytes8": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{16}$"
        },
        "bytes9": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{18}$"
        },
        "bytes10": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{20}$"
        },
        "bytes11": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{22}$"
        },
        "bytes12": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{24}$"
        },
        "bytes13": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{26}$"
        },
        "bytes14": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{28}$"
        },
        "bytes15": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{30}$"
        },
        "bytes16": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{32}$"
        },
        "bytes17": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{34}$"
        },
        "bytes18": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{36}$"
        },
        "bytes19": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{38}$"
        },
        "bytes20": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{40}$"
        },
        "bytes21": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{42}$"
        },
        "bytes22": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{44}$"
        },
        "bytes23": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{46}$"
        },
        "bytes24": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{48}$"
        },
        "bytes25": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{50}$"
        },
        "bytes26": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{52}$"
        },
        "bytes27": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{54}$"
        },
        "bytes28": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{56}$"
        },
        "bytes29": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{58}$"
        },
        "bytes30": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{60}$"
        },
        "bytes31": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{62}$"
        },
        "bytes32": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]{64}$"
        },

        "bytes": {
            "type": "string",
            "pattern": "^(?:0[Xx])?[0-9a-fA-F]+$"
        },

        "uint8": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
        },

        "uint16": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
        },

        "uint32": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4294967295
        },

        "uint64": {
            "type": "integer",
            "minimum": 0,
            "maximum": 18446744073709552000
        },

        "uint128": {
            "type": "string",
            "minLength": 1,
            "maxLength": 39,
            "pattern": "^[0-9]+$"
        },

        "ethCount": {
            "type": "string",
            "pattern": "^(0|[1-9][0-9]{0,54}|[0-9]{1,55}\\.[0-9]{0,17}[1-9])$"
        },

        "ethCountPositive": {
            "type": "string",
            "pattern": "^([1-9][0-9]{0,54}|[0-9]{1,55}\\.[0-9]{0,17}[1-9])$"
        }
    }
}
